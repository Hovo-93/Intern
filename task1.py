"""
На языке Python написать алгоритм (функцию) определения четности целого числа, который будет аналогичен нижеприведенному
по функциональности, но отличен по своей сути. Объяснить плюсы и минусы обеих реализаций.

Пример:

def isEven(value):

      return value % 2 == 0

"""

from dis import dis


def my_isEven(value):
    return value & 1


def isEven(value):
    return value % 2 == 0


print("Bytecode for my_isEven:")
dis(my_isEven)
print("\nBytecode for isEven:")
dis(isEven)

"""
Плюсы: Деления по модулю (%)(остаток)
    Деления по модулю (%) более понятно и используется для проверки четности в различных языках программирования.
Минусы:
    Деления по модулю может быть более затратной с точки зрения производительности
    
#Использовал  побитовое И(&). Суть такой проверки в том, что выясняем, если последний бит у числа 1,
    то число нечетное, если 0 - чётное.    
    
Плюсы:  
    Более эффективны с точки зрения производительности.
   
Минусы:
    
    Труднее для понимания.
     
"""


# Используем dis для сравнения байт-кода двух функций и видим что побитовое И(&) быстрее работает

"""
Bytecode for my_isEven:
 22           0 LOAD_FAST                0 (value)
              2 LOAD_CONST               1 (1)
              4 BINARY_AND
              6 RETURN_VALUE

Bytecode for isEven:
 25           0 LOAD_FAST                0 (value)
              2 LOAD_CONST               1 (2)
              4 BINARY_MODULO
              6 LOAD_CONST               2 (0) загружаются константы (в данном случае, число 2 и число 0), которые будут использоваться в дальнейших операциях.
              8 COMPARE_OP               2 (==) Сравнивает два объекта
             10 RETURN_VALUE

"""
